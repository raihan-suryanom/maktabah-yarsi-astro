---
import { Icon } from "astro-icon/components";

import { cn } from "~/lib/utils/cn";
import { reverseSlugCaseToOriginal } from "~/lib/utils/helper";

import type { CategoryProps, TOCProps } from "~/lib/utils/index.type";

type Props = {
  item: TOCProps | CategoryProps;
  variant: "tableOfContents" | "categories";
  activeItem: string;
  open?: boolean;
  isServer: boolean;
  class?: string;
};

const {
  item,
  variant,
  activeItem,
  open,
  isServer,
  class: className,
} = Astro.props;
const hasChildren = item.children && item.children.length > 0;

const Action = isServer ? "button" : "a";

const pageControlProps: any = (page: string) => ({
  ...(isServer
    ? { type: "submit", "data-value": page.split("/").pop() }
    : {
        href: page,
        "data-astro-prefetch": "hover",
      }),
});
---

{
  !hasChildren ? (
    <Action
      {...pageControlProps(item.path)}
      class={cn(
        "inline-block w-full rounded-md p-[0.3em_0.5em] text-left text-sm capitalize hover:text-dark-100 dark:hover:text-light-400",
        ((item as TOCProps).page === +activeItem ||
          (item as CategoryProps)._id === activeItem) &&
          "text-primary-light hover:text-primary-light dark:text-primary-dark dark:hover:text-primary-dark",
      )}
    >
      <span>{item.title}</span>
    </Action>
  ) : (
    <details
      class={cn("[&[open]>summary>svg]:rotate-90", className)}
      open={open}
    >
      <summary class="flex justify-between py-1 font-semibold capitalize leading-snug text-dark-100 dark:text-light-400">
        {variant === "tableOfContents" ? (
          <Action
            {...pageControlProps(item.path)}
            class="inline w-auto text-left leading-snug hover:text-dark-100 dark:hover:text-light-400"
          >
            {item.title}
          </Action>
        ) : (
          reverseSlugCaseToOriginal(item.title)
        )}
        <Icon
          name="lucide:chevron-right"
          class="ml-auto shrink-0 text-primary-light transition-transform duration-200 dark:text-primary-dark [&_path]:stroke-[2.5]"
          size={20}
        />
      </summary>

      {hasChildren && (
        <ul class="border-l border-dotted border-[#e5e5e5] pl-4 dark:border-dark-300">
          {item.children.map((child) => (
            <li>
              <Astro.self
                variant={variant}
                item={child}
                open={open}
                class={className}
                activeItem={activeItem}
                isServer={isServer}
              />
            </li>
          ))}
        </ul>
      )}
    </details>
  )
}
