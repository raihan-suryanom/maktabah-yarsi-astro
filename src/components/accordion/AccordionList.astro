---
import { generateCategoryPaths } from "~/lib/utils/generatePaths";
import {
  renameAttributes,
  reverseSlugCaseToOriginal,
} from "~/lib/utils/helper";

import AccordionItem from "./AccordionItem.astro";

import type { CategoryProps, TOCProps } from "~/lib/utils/index.type";

type Props = {
  outlines: ReadonlyArray<CategoryProps> | ReadonlyArray<TOCProps>;
  variant: "tableOfContents" | "categories";
  activeItem: string;
  query?: string;
  open?: boolean;
};

const { outlines, query, ...props } = Astro.props;

const isServer = Boolean(query);

const Action = isServer ? "button" : "a";

const pageControlProps: any = (page: string) => ({
  class:
    "py-1 text-left font-semibold leading-snug text-dark-100 dark:text-light-400",
  ...(isServer
    ? { type: "submit", "data-value": page.split("/").pop() }
    : {
        href: page,
        "data-astro-prefetch": "hover",
      }),
});

const data =
  props.variant === "tableOfContents"
    ? outlines.map((item) => renameAttributes(item as TOCProps))
    : generateCategoryPaths(outlines as ReadonlyArray<CategoryProps>);
---

{
  data.map((item) =>
    item.children && item.children.length > 0 ? (
      <AccordionItem item={item} isServer={isServer} {...props} />
    ) : (
      <Action {...pageControlProps(item.path)}>
        <span>{reverseSlugCaseToOriginal(item.title)}</span>
      </Action>
    ),
  )
}
